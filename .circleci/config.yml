# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2
jobs:
  test:
    docker:
      # specify the version you desire here
      - image: circleci/node:10.4
      
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/mongo:3.4.4

    working_directory: ~/repo

    steps:
      - checkout

      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-{{ .Branch }}-{{ checksum "app/yarn.lock" }}
            - yarn-packages-{{ .Branch }}
            - yarn-packages-master
            - yarn-packages-

      - run: cd app && yarn

      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-{{ .Branch }}-{{ checksum "app/yarn.lock" }}
          paths:
            - app/node_modules/
        
      # run tests!
      - run: cd app && yarn check-syntax
      - run: cd app && yarn lint
      - run: cd app && yarn test

  build:
    docker:
      - image: circleci/node:10.4
    working_directory: ~/repo
    steps:
      - checkout

      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-{{ .Branch }}-{{ checksum "app/yarn.lock" }}
            - yarn-packages-{{ .Branch }}
            - yarn-packages-master
            - yarn-packages-
      - run: cd app && yarn

      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-{{ .Branch }}-{{ checksum "app/yarn.lock" }}
          paths:
            - app/node_modules/

      - run: cd app && yarn build && tar cfJ micropad.tar.xz build/*
      - store_artifacts:
          path: app/micropad.tar.xz
          destination: micropad.tar.xz
      - persist_to_workspace:
          root: app/
          paths:
            - build/*

  deploy:
    docker:
      - image: circleci/node:10.4

    working_directory: ~/repo

    steps:
      - attach_workspace:
          at: ~/repo/app
      - run: sudo apt install rsync

      - run: rsync -aue "ssh -p 1276 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" app/build/* $SSH_PATH

workflows:
  version: 2
  test-and-deploy:
    jobs:
      - test
      - build
      - deploy:
          requires:
            - test
            - build
